import matplotlib.pyplot as plt
import numpy as np

import os
os.environ['KMP_DUPLICATE_LIB_OK']='TRUE'

classification_results = {
 "Aircraft": {'googlenet': (-13.787486832311009, -1.761519501615249, 0.9176366782695822, 60.7919604019799), 'inception_v3': (-13.80904199982235, -1.393732322463419, 0.9202581568662574, 70.19649017549122), 'resnet50': (-12.827841351294058, -1.1489940584568878, 0.9256100141703688, 75.29623518824059), 'resnet101': (-12.872648269214812, -1.0723610435025503, 0.9241825836253171, 77.03614819259037), 'resnet152': (-12.004709514954563, -1.054851305701666, 0.9281472032965951, 77.39613019349032), 'densenet121': (-11.680013367587913, -2.896202737269861, 0.9247515767690783, 26.87865606719664), 'densenet169': (-12.689634765520067, -0.3193400859972553, 0.9327273901218858, 93.5953202339883), 'densenet201': (-11.923256549788412, -0.2684255326607811, 0.9299991152344218, 94.64526773661316), 'mobilenet_v2': (-11.495744772680428, -0.9781244067145364, 0.9248448426530669, 79.25603719814009), 'mnasnet1_0': (-11.0055616258114, -1.627596111643274, 0.9185288956255729, 64.58677066146693)}
,"Caltech": {'googlenet': (-13.811145027383542, -0.12972140106200034, 1.3927991260954407, 97.30321539702662), 'inception_v3': (-13.809740261915895, -0.07500739203315296, 1.5258781071426368, 98.3519649648496), 'resnet50': (1.2322022182708943, -0.02400299259791608, 1.4701902429671097, 99.48138757635127), 'resnet101': (-0.9186234646226882, -0.0171577823597197, 1.498245840082136, 99.64273366370865), 'resnet152': (-7.2352702862226295, -0.018996813757282717, 1.5201343323150955, 99.56206062002997), 'densenet121': (-12.96809245797568, -0.011328454413776539, 1.3355882584253134, 99.76950558948946), 'densenet169': (-12.156939273595032, -0.007687398549864012, 1.3876517742130399, 99.83865391264261), 'densenet201': (-7.0115691841249355, -0.007180602955316159, 1.3837664252624473, 99.86170335369367), 'mobilenet_v2': (-7.248714258901386, -0.02249430597300609, 1.3279736453755693, 99.55053589950444), 'mnasnet1_0': (-11.211995191712589, -0.1235974965350937, 1.3200951641028718, 97.34931427912873)}
,"Cars": {'googlenet': (-13.788274298026096, -1.8119254403103708, 1.2405502646695263, 57.542594204700904), 'inception_v3': (-12.552608808476853, -1.3569747004248958, 1.2427229246213178, 69.10831986071385), 'resnet50': (-12.082545032802262, -0.9032724856624068, 1.244252909360367, 79.85325208307424), 'resnet101': (-11.33544737760147, -0.8356966383635239, 1.2452153961348702, 81.3456037806243), 'resnet152': (-11.077745785909826, -0.7801220426039756, 1.2471866777845395, 82.5767939311031), 'densenet121': (-12.278976715758496, -0.4104017948016344, 1.244554698498279, 91.08319860713841), 'densenet169': (-11.639043815834844, -0.18211845930696183, 1.2476959492999244, 96.11988558636986), 'densenet201': (-11.307197752541983, -0.16396534886838812, 1.2474665990357998, 96.49297351075737), 'mobilenet_v2': (-13.226968510080239, -0.845409785136877, 1.2453394026244669, 81.1963686108693), 'mnasnet1_0': (-13.168052357805553, -1.8640861963779671, 1.240567344421538, 56.43576669568461)}
,"CIFAR10": {'googlenet': (-6.420127889993189, -0.6868144883968299, 0.13700464089945588, 84.46), 'inception_v3': (-8.070099591402531, -0.841575050215103, 0.10222186259480474, 80.0), 'resnet50': (-3.0088006360812005, -0.5778863035883071, 0.14132209660737707, 87.41), 'resnet101': (-7.123845713311599, -0.5414698723111855, 0.18242820198591164, 88.36), 'resnet152': (1.4285640570589218, -0.5107021430613362, 0.17833440939064524, 89.28), 'densenet121': (-7.698915148294134, -0.5218702590322932, 0.11351048170585218, 89.02), 'densenet169': (-7.024669333830942, -0.3939649303729457, 0.15289269529566946, 92.26), 'densenet201': (-10.334761890599438, -0.3141797342636669, 0.1543431126307633, 93.97), 'mobilenet_v2': (-8.712558080017933, -0.7195487549770372, 0.07743315977987189, 83.57), 'mnasnet1_0': (-6.118166865501409, -0.6470712734022608, 0.07151447078418667, 85.75)}
,"CIFAR100": {'googlenet': (-13.767655012615025, -1.354814122134078, 0.9702363630166773, 71.53), 'inception_v3': (-13.738475802151218, -1.3640197831616878, 0.9619551701074284, 71.79), 'resnet50': (-12.96082986710976, -0.9363159419059384, 0.9676406917840515, 81.07), 'resnet101': (-12.933576306662522, -0.7580975047264177, 0.9832519785335246, 84.84), 'resnet152': (-4.56568362129169, -0.7613222606952157, 0.9865365283491652, 84.9), 'densenet121': (-12.986423192596357, -0.6751185172846145, 0.9525838204072963, 86.87), 'densenet169': (-12.979984498550213, -0.3186028974876644, 0.967219123906739, 94.01), 'densenet201': (-12.465572893571302, -0.2761577946812371, 0.9655657075965552, 94.87), 'mobilenet_v2': (-10.04077689966576, -1.0048769851784085, 0.9483850492016626, 80.0), 'mnasnet1_0': (-6.007826061180384, -1.317001026392797, 0.9471453287946008, 72.85)}
,"DTD": {'googlenet': (-12.43773115994767, -0.9140972479848656, 0.638117685378661, 77.81914893617021), 'inception_v3': (-13.761605257238752, -0.5092582065244907, 0.6436605767612407, 87.97872340425532), 'resnet50': (-10.41398231157934, -0.19066973733941417, 0.6636235422228816, 95.79787234042553), 'resnet101': (-5.619794409566564, -0.2604156584765927, 0.657968900665237, 94.25531914893617), 'resnet152': (-10.584596923235818, -0.1778047166920032, 0.6665848848242112, 95.95744680851064), 'densenet121': (-7.00430841394785, -0.15059042796428812, 0.6404320080238382, 96.70212765957447), 'densenet169': (-2.297749959319419, -0.10489355374713195, 0.6629273068099065, 97.6063829787234), 'densenet201': (-2.465592745242112, -0.06576712594121906, 0.6581575500091047, 98.45744680851064), 'mobilenet_v2': (-9.10628531618585, -0.3115718461762091, 0.6366846601279753, 93.08510638297872), 'mnasnet1_0': (-7.078442717827953, -0.9802846810217338, 0.6460888109618088, 74.36170212765957)}
,"Pets": {'googlenet': (-12.25248688191935, -0.235679151162901, 0.7631581131337364, 95.02717391304348), 'inception_v3': (-13.804232272746178, -0.11881196093423416, 0.9433582024376171, 97.52717391304348), 'resnet50': (-9.578144436898366, -0.04964648901051941, 0.8859626960873491, 98.96739130434783), 'resnet101': (-4.173674247952553, -0.03505910637659195, 0.9092411617799817, 99.34782608695652), 'resnet152': (-6.6176934069803615, -0.040996938687362705, 0.9369703126711673, 99.21195652173913), 'densenet121': (-11.894144223584501, -0.03125353652496208, 0.7675493779060534, 99.40217391304348), 'densenet169': (-11.201731363592438, -0.0015244982614560118, 0.8132343136775796, 99.94565217391305), 'densenet201': (-8.275603807917275, -0.012176797078533247, 0.8231788813995776, 99.78260869565217), 'mobilenet_v2': (-8.423370196136887, -0.07318290994166574, 0.7352936242361447, 98.58695652173913), 'mnasnet1_0': (-10.585801088096694, -0.20484290161266516, 0.6915669676234547, 95.81521739130434)}
}
classification_tasks = ["Aircraft", "Caltech", "Cars", "CIFAR10", "CIFAR100", "DTD", "Pets"]
classification_models = ["googlenet", "inception_v3", "resnet50", "resnet101", "resnet152", "densenet121", "densenet169", "densenet201", "mobilenet_v2", "mnasnet1_0"]
classification_assessments = ["LEEP", "NCE", "LogME"]
classification_marker = ['o', 'P', 'd', 'v', '*', '^', 's', 'h', 'p', 'd']


def weight(t1, t2):
    return 1. / (1 + np.exp(-(t1 - t2)))


def sgn(x1, x2):
    if x1 >= x2:
        return 1
    elif x1 < x2:
        return -1


def tau_w(num_of_models: int, T: list, S: list):
    tau = 0.
    for i in range(num_of_models):
        for j in range(i + 1, num_of_models):
            # tau += weight(T[i], T[j]) * sgn(S[i], S[j]) * sgn(T[i], T[j])
            tau += sgn(S[i], S[j]) * sgn(T[i], T[j])
    return (2. / (num_of_models * (num_of_models - 1))) * tau


def main():
    ncols = len(classification_tasks)
    nrows = len(classification_assessments)
    fig = plt.figure(figsize=(25, 7.5))
    axs = fig.subplots(nrows, ncols)
    c=0
    m=0
    for task_name, task_result in classification_results.items():
        leep = []
        nce = []
        logme = []
        acc = []
        for model_name, (y1, y2, y3, x) in task_result.items():
            axs[0, c].scatter(x, y1, marker=classification_marker[m], color='black')
            axs[1, c].scatter(x, y2, marker=classification_marker[m], color='black')
            axs[2, c].scatter(x, y3, marker=classification_marker[m], color='black')
            leep.append(y1)
            nce.append(y2)
            logme.append(y3)
            acc.append(x)
            m += 1
        axs[0, c].set_title(f"{task_name}({tau_w(10, acc, leep):.2f})")
        axs[0, c].tick_params(labelsize=7.15)
        axs[1, c].set_title(f"{task_name}({tau_w(10, acc, nce):.2f})")
        axs[1, c].tick_params(labelsize=7.15)
        axs[2, c].set_title(f"{task_name}({tau_w(10, acc, logme):.2f})")
        axs[2, c].tick_params(labelsize=7.15)
        m = 0
        c += 1
    axs[0, 0].set_ylabel('LEEP')
    axs[1, 0].set_ylabel('NCE')
    axs[2, 0].set_ylabel('LogME')

    plt.subplots_adjust(left=0.05, bottom=0.07, right=0.95, top=0.95)
    plt.legend(["googlenet", "inception_v3", "resnet50", "resnet101", "resnet152", "densenet121", "densenet169", "densenet201", "mobilenet_v2", "mnasnet1_0"]
               ,bbox_to_anchor=(0.8, -0.1), borderaxespad=0,ncols=10)
    plt.show()


if __name__ == '__main__':
    main()
